/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/du2016/code-generator/pkg/apis/net/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// NetLister helps list Nets.
type NetLister interface {
	// List lists all Nets in the indexer.
	List(selector labels.Selector) (ret []*v1.Net, err error)
	// Nets returns an object that can list and get Nets.
	Nets(namespace string) NetNamespaceLister
	NetListerExpansion
}

// netLister implements the NetLister interface.
type netLister struct {
	indexer cache.Indexer
}

// NewNetLister returns a new NetLister.
func NewNetLister(indexer cache.Indexer) NetLister {
	return &netLister{indexer: indexer}
}

// List lists all Nets in the indexer.
func (s *netLister) List(selector labels.Selector) (ret []*v1.Net, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Net))
	})
	return ret, err
}

// Nets returns an object that can list and get Nets.
func (s *netLister) Nets(namespace string) NetNamespaceLister {
	return netNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// NetNamespaceLister helps list and get Nets.
type NetNamespaceLister interface {
	// List lists all Nets in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.Net, err error)
	// Get retrieves the Net from the indexer for a given namespace and name.
	Get(name string) (*v1.Net, error)
	NetNamespaceListerExpansion
}

// netNamespaceLister implements the NetNamespaceLister
// interface.
type netNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Nets in the indexer for a given namespace.
func (s netNamespaceLister) List(selector labels.Selector) (ret []*v1.Net, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Net))
	})
	return ret, err
}

// Get retrieves the Net from the indexer for a given namespace and name.
func (s netNamespaceLister) Get(name string) (*v1.Net, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("net"), name)
	}
	return obj.(*v1.Net), nil
}
